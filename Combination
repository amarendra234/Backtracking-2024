class Solution {
public:
    vector<vector<int>> ans;
    void helper(int idx, int k,vector<int>&current,int n)
    {
        if(current.size()==k)    // base case
        {
            ans.push_back(current);
            return;
        }
        
        for(int i=idx;i<n+1;i++)
        {
            current.push_back(i);  //consider the current element i
            helper(i+1,k,current,n); // generate combinations
            current.pop_back(); //proceed to next element
        }
    }
    void k_combination(int n,int k,vector<int>&temp,vector<vector<int>>&ans,int index){
        if(index>n){
            if(temp.size()==k){
                ans.push_back(temp);
            }
            return;
        }
        if(temp.size()>k){
            return;
        }
        // same concept include
        temp.push_back(index);
        k_combination(n,k,temp,ans,index+1);
        temp.pop_back();

        // not inclucde
        k_combination(n,k,temp,ans,index+1);

    }
    vector<vector<int>> combine(int n, int k) {
        vector<vector<int>>res;
        vector<int>temp;
        k_combination(n,k,temp,res,1);
        return res;
    }
};
