class Solution {
public:
        void subset_sequence(int index,vector<vector<int>>&ans,vector<int>&temp,int k,int &sum,int n){
      
            if(sum==n and temp.size()==k){
                ans.push_back(temp);
                return;
            }
            
        if(sum>n or temp.size()>k){
            return;
        }
        // include in array
        // sum+=index;
        // temp.push_back(index);
        // subset_sequence(index+1,ans,temp,k,sum,n);
        // sum-=index;
        // temp.pop_back();

        // // not include
        // subset_sequence(index+1,ans,temp,k,sum,n);
        for(int i=index;i<=9;i++){
            sum+=i;
            temp.push_back(i);
            subset_sequence(i+1,ans,temp,k,sum,n);
            sum-=i;
            temp.pop_back();
        }
    }
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>>ans;
        vector<int>temp;
        int sum=0;
        subset_sequence(1,ans,temp,k,sum,n);
        return ans;
    }
};
