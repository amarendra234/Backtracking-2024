class Solution {
public:
    void unique_path(vector<vector<int>>&grid,int n,int m,int no_of_empty,int start_x,int start_y,int target_x,int target_y,int &res){
        if(start_x==target_x and start_y==target_y){
            if(no_of_empty==-1){
                res++;
            }
            return;
        }
        if(start_x<0 or start_x>=n or start_y<0 or start_y>=m or grid[start_x][start_y]==-1){
            return;
        }
        int x[]={-1,1,0,0};
        int y[]={0,0,-1,1};
        no_of_empty-=1;
        int val=grid[start_x][start_y];
        grid[start_x][start_y]=-1;
        for(int i=0;i<=3;i++){
            unique_path(grid,n,m,no_of_empty,start_x+x[i],start_y+y[i],target_x,target_y,res);
        }
        no_of_empty+=1;
        grid[start_x][start_y]=val;
    }
    int uniquePathsIII(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int start_x=-1,start_y=-1,target_x=-1,target_y=-1;
        int no_of_empty=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
               if(grid[i][j]==0){
                   no_of_empty++;
               }else if(grid[i][j]==1){
                  start_x=i,start_y=j;
               }else if(grid[i][j]==2){
                target_x=i,target_y=j;
               }
            }
        }
        int res=0;
        unique_path(grid,n,m,no_of_empty,start_x,start_y,target_x,target_y,res);
        return res;
    }
};
